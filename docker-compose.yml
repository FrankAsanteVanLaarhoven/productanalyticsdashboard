version: '3.8'

services:
  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
      timeout: 5s
      start_period: 10s

name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        pytest test/

    - name: Build Docker image
      run: |
        docker build -t yourusername/your-repo:latest .

    - name: Push Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker push yourusername/your-repo:latest

  webserver:
    image: apache/airflow:2.7.1
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      PYTHONPATH: /opt/airflow/dags
      KAGGLE_USERNAME: ${KAGGLE_USERNAME}
      KAGGLE_KEY: ${KAGGLE_KEY}
      _PIP_ADDITIONAL_REQUIREMENTS: sqlalchemy pandas psycopg2-binary kaggle kagglehub python-dotenv humanize
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./sql:/opt/airflow/sql
      - ~/.kaggle:/opt/airflow/.kaggle:ro
    ports:
      - "8080:8080"
    command: >
      bash -c "airflow db init &&
               airflow users create --username favl --firstname Frank --lastname VanLaarhoven --role Admin --email info@frankvanlaarhoven.co.uk --password FVan1aarhoven &&
               airflow webserver"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  scheduler:
    image: apache/airflow:2.7.1
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      PYTHONPATH: /opt/airflow/dags
      KAGGLE_USERNAME: ${KAGGLE_USERNAME}
      KAGGLE_KEY: ${KAGGLE_KEY}
      _PIP_ADDITIONAL_REQUIREMENTS: sqlalchemy pandas psycopg2-binary kaggle kagglehub python-dotenv humanize
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./sql:/opt/airflow/sql
      - ~/.kaggle:/opt/airflow/.kaggle:ro
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname \"$${HOSTNAME}\""]
      interval: 30s
      timeout: 10s
      retries: 5

  streamlit:
    build: 
      context: .
      dockerfile: streamlit/Dockerfile
    ports:
      - "8501:8501"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://airflow:airflow@postgres:5432/airflow
      POSTGRES_SCHEMA: meap
      POSTGRES_VIEW: vw_product_recommendations
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      PRICE_STRATEGIES: '{"AAA":"Maintain premium pricing","AA":"Consider price optimization","A":"Review pricing strategy","B":"Evaluate market position"}'
      VOLUME_STRATEGIES: '{"High Volume":"Maintain inventory levels","Medium Volume":"Monitor stock levels","Standard Volume":"Review stock strategy"}'
    volumes:
      - ./local_data_path:/app/data
      - ./product_analysis_app:/app/product_analysis_app
      - ./sql:/app/sql
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8501/_stcore/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

volumes:
  postgres_data:

  

  